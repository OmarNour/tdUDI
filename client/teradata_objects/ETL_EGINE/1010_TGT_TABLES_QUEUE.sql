drop TABLE GDEV1_ETL.TGT_TABLES_QUEUE;

CREATE SET TABLE GDEV1_ETL.TGT_TABLES_QUEUE ,FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT,
     DEFAULT MERGEBLOCKRATIO,
     MAP = TD_MAP1
     (
       TGT_TABLE VARCHAR(200) CHARACTER SET LATIN NOT CASESPECIFIC NOT NULL
	  ,TGT_LAYER VARCHAR(200) CHARACTER SET LATIN NOT CASESPECIFIC NOT NULL
	  ,LAYER_LEVEL integer not null
	  ,SOURCE_NAME VARCHAR(100) CHARACTER SET LATIN NOT CASESPECIFIC NOT NULL
	  ,RUN_ID DECIMAL(38,0) NOT NULL
      ,TGT_TABLE_STATE INTEGER DEFAULT 0 
      ,LOAD_ID VARCHAR(200) CHARACTER SET LATIN NOT CASESPECIFIC NOT NULL
      ,OVERRIDE_LOAD INTEGER DEFAULT 0 
      ,LAST_UPDATE_TIME TIMESTAMP(6) DEFAULT CURRENT_TIMESTAMP(6)
	  , check (
					TGT_TABLE_STATE = 0 /* ready to be queued */
				or 	TGT_TABLE_STATE = 1 /* queued */
				or 	TGT_TABLE_STATE = 2 /* dispatched */
				or 	TGT_TABLE_STATE = 3 /* processed */
				
			)
	  )
UNIQUE PRIMARY INDEX ( TGT_TABLE ,TGT_LAYER ,RUN_ID , LOAD_ID);

----------------
DELETE FROM GDEV1_ETL.TGT_TABLES_QUEUE ;

insert into GDEV1_ETL.TGT_TABLES_QUEUE
with SRC_ONE_LOAD_ID as (

	select a.SOURCE_NAME, a.LOAD_ID, a.batch_id
	from GDEV1_ETL.cdc_audit a
	where exists (select 1 from GDEV1_ETL.SOURCE_SYSTEMS P where p.SOURCE_NAME = a.SOURCE_NAME and p.ACTIVE=1 and p.IS_SCHEDULED = 1 and p.loading_mode = 'ONLINE')
	and a.PROCESSED=0
	qualify ROW_NUMBER() OVER (Partition by SOURCE_NAME order by  batch_id) = 1
	
	UNION ALL
	
	select P.SOURCE_NAME, P.SOURCE_NAME LOAD_ID, 0 batch_id
	from GDEV1_ETL.SOURCE_SYSTEMS P where p.ACTIVE=1 and p.IS_SCHEDULED = 1 and p.loading_mode = 'OFFLINE'
)
, TGT_TABLES AS
(
	SELECT DISTINCT 
						
					  p.TABLE_NAME TGT_TABLE 
					, l.layer_name TGT_LAYER
					, l.layer_Level
					, p.SOURCE_NAME						
 FROM GDEV1_ETL.SOURCE_SYSTEM_tables P, GDEV1_ETL.LAYERS l
 WHERE  l.layer_name in ( 'STG', 'SRCI')
	
	union all
	
		SELECT DISTINCT 
						
		  p.TGT_TABLE 
		, p.TGT_LAYER
		, l.layer_Level
		, p.SOURCE_NAME
						
 FROM GDEV1_ETL.V_PROCESS P
 join GDEV1_ETL.LAYERS l
 on p.TGT_LAYER = l.layer_name
	WHERE ACTIVE = 1
)
SELECT
T.TGT_TABLE
,T.TGT_LAYER
,T.LAYER_LEVEL
,T.SOURCE_NAME
, GDEV1_ETL.generate_run_id() RUN_ID
,0 TGT_TABLE_STATE
,L.LOAD_ID
,0 OVERRIDE_LOAD
,CURRENT_TIMESTAMP		LAST_UPDATE_TIME		
FROM TGT_TABLES T, SRC_ONE_LOAD_ID L
WHERE T.SOURCE_NAME=L.SOURCE_NAME;


SEL * FROM GDEV1_ETL.TGT_TABLES_QUEUE ORDER BY LAYER_LEVEL, SOURCE_NAME,TGT_LAYER,TGT_TABLE;
----------------------------------

INSERT	INTO GDEV1_ETL.EXEC_SOURCE_LOGS
(RUN_ID, LOAD_ID, SOURCE_NAME, START_TIMESTAMP, END_TIMESTAMP,
STG_DONE, BKEY_DONE, SRCI_DONE, CORE_DONE, DONE
,ROWS_INSERTED_COUNT,ROWS_UPDATED_COUNT, ROWS_DELETED_COUNT, ERROR_CODE, ERROR_MSG
)
SELect
distinct
RUN_ID, LOAD_ID, SOURCE_NAME, current_timestamp START_TIMESTAMP, null END_TIMESTAMP,
		0 STG_DONE, 0 BKEY_DONE, 0 SRCI_DONE, 0 CORE_DONE, 0 DONE
		, null ROWS_INSERTED_COUNT, null  ROWS_UPDATED_COUNT, null  ROWS_DELETED_COUNT,
		null  ERROR_CODE, null  ERROR_MSG
FROM GDEV1_ETL.TGT_TABLES_QUEUE src
where not exists (select 1 from GDEV1_ETL.EXEC_SOURCE_LOGS tgt where src.RUN_ID=tgt.RUN_ID and src.LOAD_ID=tgt.LOAD_ID and src.SOURCE_NAME=tgt.SOURCE_NAME);