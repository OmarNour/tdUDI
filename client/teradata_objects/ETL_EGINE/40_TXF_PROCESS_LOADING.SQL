REPLACE  PROCEDURE /*VER.01*/ GDEV1P_PP.TXF_PROCESS_LOADING
    (
    IN 		I_PROCESSNAME  			VARCHAR(1000),
    IN 		I_APPLY_TYPE  			VARCHAR(500),
    IN 		I_RUN_ID 				BIGINT,
    IN		I_LOAD_ID				VARCHAR(500),
    OUT  	O_ROWS_COUNT  			BIGINT,
    OUT  	O_RETURN_CODE  			INTEGER,
    OUT  	O_RETURN_MSG 			VARCHAR(5000)
    )
    BEGIN
        DECLARE 	V_RETURN_CODE  				INTEGER DEFAULT 0;
        DECLARE 	V_RETURN_MSG 				VARCHAR(5000) DEFAULT 'Process Completed Successfully';
        DECLARE 	V_ROWS_IN_BASE, V_ROWS_IN_DELTA, V_ROWS_COUNT				FLOAT DEFAULT 0;
        
        DECLARE 	V_SQL_SCRIPT_ID				INTEGER DEFAULT 0;
        DECLARE 	V_DBC_RETURN_CODE 			INTEGER;
		DECLARE 	V_DBC_RETURN_MSG  			VARCHAR(1000);
		DECLARE 	V_DBC_ROWS_COUNT			FLOAT;
                                                                
        DECLARE 	V_SOURCE_NAME 				VARCHAR(500);
        DECLARE    	V_SRC_DB					VARCHAR(500);
        DECLARE    	V_SRC_TABLE					VARCHAR(500);
        DECLARE    	V_TGT_DB					VARCHAR(500);
        DECLARE    	V_TGT_TABLE					VARCHAR(500);
        DECLARE    	V_APPLY_TYPE				VARCHAR(500);
        DECLARE 	V_NULLABLE_COLUMN			VARCHAR(200);
        
        DECLARE		V_BATCH_ID					VARCHAR(150)	DEFAULT 'BATCH_ID';
        DECLARE	   	V_REF_KEY   				VARCHAR(150)	DEFAULT 'REF_KEY';
        DECLARE	   	V_MODIFICATION_TYPE 		VARCHAR(150)	DEFAULT 'MODIFICATION_TYPE';
        
        DECLARE		V_INSERT_TYPE				VARCHAR(150)	DEFAULT 'INSERT';
        DECLARE		V_UPSERT_TYPE				VARCHAR(150)	DEFAULT 'UPSERT';
        DECLARE		V_UPSERTDELETE_TYPE			VARCHAR(150)	DEFAULT 'UPSERTDELET';
        DECLARE		V_HISTORY_TYPE				VARCHAR(150)	DEFAULT 'HISTORY';
        
		DECLARE		V_KEY_COLUMNS				VARCHAR(2000);
        DECLARE		V_HISTORY_COLUMNS			VARCHAR(2000)	DEFAULT '';
     	DECLARE	   	V_START_DATE_1SEC 			VARCHAR(5000)	DEFAULT '';
     	DECLARE	   	V_END_DATE_COLUMN, V_START_DATE_COLUMN 		VARCHAR(150)	DEFAULT '';
     	DECLARE	   	V_QUALIFY_BY_KEY 			VARCHAR(5000)	DEFAULT '';
     	DECLARE		V_FULL_KEY					VARCHAR(2000)	DEFAULT '';
     	DECLARE		V_FULL_KEY_JOIN				VARCHAR(2000)	DEFAULT '';     	
        DECLARE		V_NORMAL_COMMON_COLUMNS		VARCHAR(2000)	DEFAULT '';
        DECLARE 	V_SET_HISTORY_COLUMNS, V_SET_NORMAL_COMMON_COLUMNS, V_X_HISTORY_COLUMNS, v_X_NORMAL_COMMON_COLUMNS, v_CONCATE_HIST_COL_X
        			, V_CONCATE_HIST_COL_Y, V_COALESCE_HIST_COLX, V_COALESCE_HIST_COLY
        			, V_COALESCE_KEY_COLUMN, V_KEY_COLUMNS_JOIN			VARCHAR(2000)	DEFAULT '';
        			
        DECLARE 	V_START_DATE_COLUMN_JOIN	VARCHAR(2000)	DEFAULT '';
        DECLARE		V_TMP_INPUT_VIEW_NAME, V_BASE_VT_NAME, V_DELTA_INPUT_VIEW_NAME		VARCHAR(150)	DEFAULT '';
        
     	DECLARE 	V_INSERT_INTO_MODEL_FROM_INPV, V_UPDATE_END_DATE_COLUMN, V_UPDATE_MODEL_DATA_FROM_INPV, V_DEL_FROM_MODEL_SAME_HC
     				, V_VT_UPSERT_MODEL, V_VT_NEW_MODEL_END_DATE , V_VT_ALL_KEYS, V_VT_BASE_TABLE, V_VT_INPUT_VIEW
     				, V_VT_DELTA_INPUT_VIEW, V_TMP_INPUT_VIEW		clob character set unicode;
     	DECLARE 	V_DROP_UPSERT_MODEL, V_DROP_NEW_MODEL_END_DATE, V_DROP_ALL_KEYS, V_DROP_BASE_TABLE
     				, V_DROP_INPUT_VIEW, V_DROP_DELTA_INPUT_VIEW, V_DROP_TMP_INPUT_VIEW								VARCHAR(2000);
     	
        DECLARE 	V_WITH_DATA_PI			VARCHAR(100) DEFAULT 'WITH DATA AND STATS PRIMARY INDEX';
		DECLARE 	V_WITH_DATA_UNIQUE_PI	VARCHAR(100) DEFAULT 'WITH DATA AND STATS UNIQUE PRIMARY INDEX';
	
        DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN 	
            SET O_RETURN_CODE = SQLCODE;
            GET DIAGNOSTICS EXCEPTION 1 O_RETURN_MSG = MESSAGE_TEXT;
        END;
        
        MAINBLOCK:
        BEGIN
            SELECT 
            SOURCE_NAME,
            SRC_DB,
            SRC_TABLE,
            TGT_DB,
            TGT_TABLE,
            coalesce(I_APPLY_TYPE,APPLY_TYPE) APPLY_TYPE
            ,KEY_COLUMNS
            ,COALESCE(START_DATE_COLUMN,'') START_DATE_COLUMN
            ,COALESCE(','||HISTORY_COLUMNS,'') HISTORY_COLUMNS
            ,COALESCE(','||NORMAL_COMMON_COLUMNS,'') NORMAL_COMMON_COLUMNS
            ,KEY_COLUMNS_JOIN
            ,COALESCE('X.'||START_DATE_COLUMN||' = Y.'||START_DATE_COLUMN,'') START_DATE_COLUMN_JOIN
            ,COALESCE_KEY_COLUMN
            ,END_DATE_COLUMN
            ,COALESCE_HIST_COLX
            ,COALESCE_HIST_COLY
            ,CONCATE_HIST_COL_X
            ,CONCATE_HIST_COL_Y
            ,coalesce(','||X_NORMAL_COMMON_COLUMNS,'') X_NORMAL_COMMON_COLUMNS
            ,COALESCE(','||X_HISTORY_COLUMNS,'') X_HISTORY_COLUMNS
            ,COALESCE(','||SET_HISTORY_COLUMNS,'') SET_HISTORY_COLUMNS
            ,COALESCE(','||SET_NORMAL_COMMON_COLUMNS,'') SET_NORMAL_COMMON_COLUMNS
            FROM GDEV1V_GCFR.PROCESS
            WHERE PROCESS_NAME = I_PROCESSNAME
                AND  PROCESS_TYPE = 'TXF'
                AND  ACTIVE = 1
            INTO V_SOURCE_NAME, V_SRC_DB, V_SRC_TABLE , V_TGT_DB, V_TGT_TABLE, V_APPLY_TYPE
            	,V_KEY_COLUMNS ,V_START_DATE_COLUMN ,V_HISTORY_COLUMNS, V_NORMAL_COMMON_COLUMNS
            	,V_KEY_COLUMNS_JOIN, V_START_DATE_COLUMN_JOIN, V_COALESCE_KEY_COLUMN
            	,V_END_DATE_COLUMN, V_COALESCE_HIST_COLX, V_COALESCE_HIST_COLY
            	,v_CONCATE_HIST_COL_X, V_CONCATE_HIST_COL_Y, v_X_NORMAL_COMMON_COLUMNS, V_X_HISTORY_COLUMNS
            	,V_SET_HISTORY_COLUMNS, V_SET_NORMAL_COMMON_COLUMNS;
            
            IF V_SOURCE_NAME IS NULL
            THEN
            	set V_RETURN_CODE = -1;
            	SET V_RETURN_MSG = 'Invalid Proccess!';
            	leave MAINBLOCK;
            end if;
            
            SET V_FULL_KEY = V_KEY_COLUMNS;
            SET V_FULL_KEY_JOIN = V_KEY_COLUMNS_JOIN;
            
            if V_APPLY_TYPE = V_HISTORY_TYPE
            then
            	SET V_FULL_KEY = V_FULL_KEY||', '||V_START_DATE_COLUMN;
            	SET V_FULL_KEY_JOIN = V_FULL_KEY_JOIN||' AND '||V_START_DATE_COLUMN_JOIN;
            	
            	--SET V_HISTORY_COLUMNS = ','||V_HISTORY_COLUMNS;
            	select 
					'/* ********************** START RN + 1 SEC ********************************** */
						, 	ROW_NUMBER () OVER (PARTITION BY '||V_FULL_KEY||' 
												ORDER BY  '||V_BATCH_ID||' ,'||V_MODIFICATION_TYPE||' ,'||V_REF_KEY||' ) - 1 AS RN
						, 	CAST(CAST('||V_START_DATE_COLUMN||' AS VARCHAR(19)) AS TIMESTAMP (0)) 
						+  	CAST((RN/3600) AS INTERVAL HOUR )
						+	CAST((RN/60)MOD 60 AS INTERVAL MINUTE ) 
						+	CAST((RN) MOD 60 AS INTERVAL SECOND ) AS '||V_START_DATE_COLUMN||'					 
					/* ********************** END RN + 1 SEC ********************************** */'
				into V_START_DATE_1SEC;
				
            end if;
           	
            SET V_QUALIFY_BY_KEY = 'QUALIFY ROW_NUMBER()  OVER(PARTITION BY '||V_FULL_KEY||' ORDER BY  '||V_BATCH_ID||' DESC, '||V_MODIFICATION_TYPE||' DESC, '||V_REF_KEY||' DESC)=1 ';
          	select 
          	 'TMP_INPUT_VIEW_'		|| V_TGT_TABLE  
          	,'DROP TABLE TMP_INPUT_VIEW_'		|| V_TGT_TABLE ||';'	V_DROP_TMP_INPUT_VIEW
          	,'CREATE VOLATILE MULTISET TABLE TMP_INPUT_VIEW_' || V_TGT_TABLE || ' , no fallback AS 
				(
					with inpt_view as
					(
						SELECT 
							 '||V_BATCH_ID  ||	',' || V_MODIFICATION_TYPE	|| ',' ||V_REF_KEY||'
							,'||V_KEY_COLUMNS		|| V_NORMAL_COMMON_COLUMNS 		
							  ||V_HISTORY_COLUMNS 	|| V_START_DATE_1SEC||'
							,CASE WHEN ' ||V_MODIFICATION_TYPE|| ' = ''D'' THEN 1 ELSE 0 END INPV_DELETE_FLAG
							from ' || V_SRC_DB || '.' || V_SRC_TABLE ||'
					)
					select * from inpt_view
					' || V_QUALIFY_BY_KEY || '						 
				)  ' || V_WITH_DATA_UNIQUE_PI || '  (' || V_FULL_KEY || ') ON COMMIT PRESERVE ROWS;' 
			into V_TMP_INPUT_VIEW_NAME, V_DROP_TMP_INPUT_VIEW, V_TMP_INPUT_VIEW;
			--------------------------------------------------------------------------------------------------------------------------------
			select 
				 'DELTA_INPUT_VIEW_'		|| V_TGT_TABLE  
				,'DROP TABLE DELTA_INPUT_VIEW_'		|| V_TGT_TABLE ||';'
				,'CREATE VOLATILE MULTISET TABLE DELTA_INPUT_VIEW_' || V_TGT_TABLE || ' , no fallback AS 
				(
					SELECT ' || V_FULL_KEY || V_NORMAL_COMMON_COLUMNS ||V_HISTORY_COLUMNS	|| ', INPV_DELETE_FLAG					 
					FROM TMP_INPUT_VIEW_' || V_TGT_TABLE || '
					MINUS
					SELECT ' || V_FULL_KEY || V_NORMAL_COMMON_COLUMNS ||V_HISTORY_COLUMNS	|| ',CASE WHEN END_TS IS NOT NULL THEN 1 ELSE 0 END DELETE_FLAG					 
					FROM '||V_TGT_DB||'.' || V_TGT_TABLE || ' X
					where exists (
								select 1 
								from TMP_INPUT_VIEW_' || V_TGT_TABLE || ' y 
								where ' || V_KEY_COLUMNS_JOIN || '
								)							
				)  ' || V_WITH_DATA_UNIQUE_PI || '  (' || V_FULL_KEY || ') ON COMMIT PRESERVE ROWS;' 
			into V_DELTA_INPUT_VIEW_NAME, V_DROP_DELTA_INPUT_VIEW, V_VT_DELTA_INPUT_VIEW
			WHERE V_APPLY_TYPE <> V_INSERT_TYPE;
			--------------------------------------------------------------------------------------------------------------------------------			
			select 
			 'DROP TABLE INPUT_VIEW_' 			|| V_TGT_TABLE ||';'	
			,'CREATE VOLATILE MULTISET TABLE INPUT_VIEW_' || V_TGT_TABLE || ' , no fallback AS 
						(
							SELECT *					 
							FROM TMP_INPUT_VIEW_' || V_TGT_TABLE || ' x
							where exists (
										select 1 
										from DELTA_INPUT_VIEW_' || V_TGT_TABLE || ' y 
										where ' || V_FULL_KEY_JOIN || '
										)
						)  ' || V_WITH_DATA_UNIQUE_PI || '  (' || V_FULL_KEY || ') ON COMMIT PRESERVE ROWS;'
			into V_DROP_INPUT_VIEW, V_VT_INPUT_VIEW
			WHERE V_APPLY_TYPE <> V_INSERT_TYPE;
			--------------------------------------------------------------------------------------------------------------------------------
			select 
			'BASE_' || V_TGT_TABLE
			,'DROP TABLE BASE_' || V_TGT_TABLE || ';'
			,'CREATE VOLATILE MULTISET TABLE BASE_' || V_TGT_TABLE || ' , no fallback AS 
				(
					SELECT x.*
						  ,CASE WHEN x.END_TS IS NOT NULL THEN 1 ELSE 0 END MDL_DELETE_FLAG
					FROM '||V_TGT_DB||'.' || V_TGT_TABLE || ' x
					where exists (
								select 1 
								from INPUT_VIEW_' || V_TGT_TABLE || ' y 
								where ' || V_KEY_COLUMNS_JOIN || '
								)
				)  ' || V_WITH_DATA_UNIQUE_PI || ' (' || V_FULL_KEY || ') ON COMMIT PRESERVE ROWS;'
			into V_BASE_VT_NAME, V_DROP_BASE_TABLE, V_VT_BASE_TABLE
			WHERE V_APPLY_TYPE = V_HISTORY_TYPE;
			--------------------------------------------------------------------------------------------------------------------------------
			select
			 'DROP TABLE ALL_KEYS_'||V_TGT_TABLE
			,'CREATE VOLATILE MULTISET TABLE ALL_KEYS_'||V_TGT_TABLE||' , no fallback AS 
				(
					WITH 
					T1 AS 
					(
						SELECT 
						 COALESCE(x.batch_id,y.batch_id) batch_id
						,' || v_COALESCE_KEY_COLUMN||'
						,COALESCE(x.'|| V_START_DATE_COLUMN||',Y.'||V_START_DATE_COLUMN||') '||V_START_DATE_COLUMN||'
						,Y.'||V_END_DATE_COLUMN||' END_DATE_IN_MODEL
						,'||V_COALESCE_HIST_COLX||'
						,'||V_COALESCE_HIST_COLY||'
						,'||V_CONCATE_HIST_COL_X||'
						,'||V_CONCATE_HIST_COL_Y||'
						,CASE WHEN X.'||V_START_DATE_COLUMN||' IS NOT NULL THEN HC_X 	ELSE HC_Y	END HC' 		||'
						,CASE WHEN Y.'||V_START_DATE_COLUMN||' IS NOT NULL THEN 1 		ELSE 0 		END IN_MODEL' 	||'
						,CASE WHEN X.'||V_START_DATE_COLUMN||' IS NOT NULL THEN 1 		ELSE 0		END FROM_INPV'	||'
						'||v_X_HISTORY_COLUMNS||'
						'||v_X_NORMAL_COMMON_COLUMNS||'
						,INPV_DELETE_FLAG
						,MDL_DELETE_FLAG
						,CASE WHEN INPV_DELETE_FLAG = 1 OR (MDL_DELETE_FLAG = 1 AND FROM_INPV = 0) THEN 1 ELSE 0 END DELETE_FLAG
					
						--,COALESCE(Y.PROCESS_NAME, X.PROCESS_NAME) PROCESS_NAME
						--,CASE WHEN Y.PROCESS_NAME IS NOT NULL THEN X.PROCESS_NAME ELSE NULL END UPDATE_PROCESS_NAME
						,Y.END_TS
						 FROM INPUT_VIEW_'||V_TGT_TABLE||' X
							FULL OUTER JOIN BASE_'||V_TGT_TABLE||' Y
							ON ' || V_FULL_KEY_JOIN || ' 
					) 
					SELECT  
					batch_id
					,'|| V_FULL_KEY ||'
					'|| v_HISTORY_COLUMNS||'
					'|| V_NORMAL_COMMON_COLUMNS||'
					,END_DATE_IN_MODEL
					,IN_MODEL, FROM_INPV, INPV_DELETE_FLAG, MDL_DELETE_FLAG, DELETE_FLAG, END_TS
					,LEAD(IN_MODEL)		OVER(PARTITION BY '|| v_KEY_COLUMNS ||' ORDER BY '||V_START_DATE_COLUMN||') FOLLOWING_IN_MODEL
					,LAG(HC) 			OVER(PARTITION BY '|| v_KEY_COLUMNS ||' ORDER BY '||V_START_DATE_COLUMN||') PRECEDING_HC
					,LAG(DELETE_FLAG) 	OVER(PARTITION BY '|| v_KEY_COLUMNS ||' ORDER BY '||V_START_DATE_COLUMN||') PRECEDING_DELETE_FLAG				
					,HC_X,HC_Y,HC
					,CASE WHEN IN_MODEL=1 AND PRECEDING_HC = HC AND PRECEDING_DELETE_FLAG = DELETE_FLAG THEN 1 ELSE 0 END DELETE_FROM_MODEL
					--, PROCESS_NAME, UPDATE_PROCESS_NAME
					FROM T1

				)  ' || V_WITH_DATA_UNIQUE_PI || ' (' || V_FULL_KEY || ') ON COMMIT PRESERVE ROWS;'
			into V_DROP_ALL_KEYS, V_VT_ALL_KEYS
			WHERE V_APPLY_TYPE = V_HISTORY_TYPE;
			--------------------------------------------------------------------------------------------------------------------------------
			select 
			'DROP TABLE NEW_MODEL_END_DATE_'||V_TGT_TABLE
			,'CREATE VOLATILE MULTISET TABLE NEW_MODEL_END_DATE_'||V_TGT_TABLE||' , no fallback AS 
			(
				SELECT 
				T.* 
				,COALESCE(
							(
								LEAD('||V_START_DATE_COLUMN||') OVER(PARTITION BY '||v_KEY_COLUMNS||' ORDER BY '||V_START_DATE_COLUMN||'  ) 
							) + INTERVAL - ''1'' SECOND 
							, CASE WHEN FOLLOWING_IN_MODEL IS NULL AND DELETE_FLAG = 1 THEN '||V_START_DATE_COLUMN||' END
						)	'||V_END_DATE_COLUMN||' 
				FROM ALL_KEYS_'||V_TGT_TABLE||' T
				WHERE DELETE_FROM_MODEL = 0
				AND (
						COALESCE(PRECEDING_HC,'''') <> COALESCE(HC,'''') 
						OR (PRECEDING_DELETE_FLAG <> DELETE_FLAG)
						OR (PRECEDING_HC IS NULL AND FROM_INPV = 1 AND IN_MODEL = 0 )  
						OR (END_DATE_IN_MODEL IS NULL AND IN_MODEL = 1) 
					)
			)  ' || V_WITH_DATA_UNIQUE_PI || ' (' || V_FULL_KEY || ') ON COMMIT PRESERVE ROWS;'
			into V_DROP_NEW_MODEL_END_DATE, V_VT_NEW_MODEL_END_DATE
			WHERE V_APPLY_TYPE = V_HISTORY_TYPE;
			--------------------------------------------------------------------------------------------------------------------------------
			select 
			'DROP TABLE UPSERT_MODEL_'||V_TGT_TABLE
			,'CREATE VOLATILE MULTISET TABLE UPSERT_MODEL_'||V_TGT_TABLE||' , no fallback AS (
				SELECT * FROM NEW_MODEL_END_DATE_'||V_TGT_TABLE||' T
				WHERE (
						COALESCE(END_DATE_IN_MODEL,(''9999-12-31 00:00:00'' (TIMESTAMP))) <> COALESCE('||V_END_DATE_COLUMN||',(''9999-12-31 00:00:00'' (TIMESTAMP))) 
						OR ( ( COALESCE(HC_Y,'''') <> COALESCE(HC_X,'''') OR INPV_DELETE_FLAG <> MDL_DELETE_FLAG ) AND IN_MODEL=1 AND FROM_INPV=1)
						OR IN_MODEL = 0
						)
				)  ' || V_WITH_DATA_UNIQUE_PI || ' (' || V_FULL_KEY || ') ON COMMIT PRESERVE ROWS;' 
			into V_DROP_UPSERT_MODEL, V_VT_UPSERT_MODEL
			WHERE V_APPLY_TYPE = V_HISTORY_TYPE;
			--------------------------------------------------------------------------------------------------------------------------------
			select
			'DELETE FROM '||V_TGT_DB||'.'||V_TGT_TABLE||' Y
			-- SELECT * FROM '||V_TGT_DB||'.'||V_TGT_TABLE||' Y
			where exists (
				select 1 
				from ALL_KEYS_'||V_TGT_TABLE||' X 
				where ' || V_FULL_KEY_JOIN || ' 							
				AND X.DELETE_FROM_MODEL=1
				);'
			into V_DEL_FROM_MODEL_SAME_HC
			WHERE V_APPLY_TYPE = V_HISTORY_TYPE;
			--------------------------------------------------------------------------------------------------------------------------------
			select
			'UPDATE Y 
			FROM '||V_TGT_DB||'.'||V_TGT_TABLE||' Y
			-- SELECT * FROM '||V_TGT_DB||'.'||V_TGT_TABLE||' Y
			, UPSERT_MODEL_'||V_TGT_TABLE||' X		
			SET '||V_END_DATE_COLUMN||' = X.'||V_END_DATE_COLUMN||'
				'||V_SET_HISTORY_COLUMNS||'
				'||V_SET_NORMAL_COMMON_COLUMNS||'
				,UPDATE_TS = CURRENT_TIMESTAMP				
				,END_TS = 	CASE 
								WHEN INPV_DELETE_FLAG = 1 
								THEN 
									CASE 
										WHEN Y.END_TS IS NULL 
										THEN CURRENT_TIMESTAMP 
										ELSE Y.END_TS 
									END 
								ELSE NULL 
							END 
				, batch_id = x.batch_id
				,UPDATE_PROCESS_NAME = '''||I_PROCESSNAME||'''
			where ' || V_FULL_KEY_JOIN || ' 						
			AND X.FROM_INPV = 1
			AND X.IN_MODEL = 1;'
			into V_UPDATE_MODEL_DATA_FROM_INPV
			WHERE V_APPLY_TYPE = V_HISTORY_TYPE;
			
			select
			'UPDATE Y
			FROM '||V_TGT_DB||'.'||V_TGT_TABLE||' Y
			-- SELECT * FROM '||V_TGT_DB||'.'||V_TGT_TABLE||' Y
			, INPUT_VIEW_'||V_TGT_TABLE||' X		
			SET UPDATE_PROCESS_NAME = '''||I_PROCESSNAME||'''
				, batch_id = x.batch_id
				'||V_SET_NORMAL_COMMON_COLUMNS||'	
				'||V_SET_HISTORY_COLUMNS||'		
				,UPDATE_TS = CURRENT_TIMESTAMP
				,END_TS = 	CASE 
								WHEN INPV_DELETE_FLAG = 1 
								THEN 
									CASE 
										WHEN Y.END_TS IS NULL 
										THEN CURRENT_TIMESTAMP 
										ELSE Y.END_TS 
									END 
								ELSE NULL 
							END 
			WHERE ' || V_FULL_KEY_JOIN || ' ;' 
			into V_UPDATE_MODEL_DATA_FROM_INPV
			WHERE V_APPLY_TYPE in( V_UPSERT_TYPE, V_UPSERTDELETE_TYPE );
			--------------------------------------------------------------------------------------------------------------------------------
			select
			'UPDATE Y 
			FROM '||V_TGT_DB||'.'||V_TGT_TABLE||' Y
			-- SELECT * FROM '||V_TGT_DB||'.'||V_TGT_TABLE||' Y
				, UPSERT_MODEL_'||V_TGT_TABLE||' X				
			SET '||V_END_DATE_COLUMN||' = X.'||V_END_DATE_COLUMN||'
				,UPDATE_TS = CURRENT_TIMESTAMP
				,UPDATE_PROCESS_NAME = '''||I_PROCESSNAME||'''
				,batch_id = x.batch_id
			where ' || V_FULL_KEY_JOIN || ' 						
			AND X.FROM_INPV = 0;'
			into V_UPDATE_END_DATE_COLUMN
			WHERE V_APPLY_TYPE = V_HISTORY_TYPE;
			--------------------------------------------------------------------------------------------------------------------------------
			select 
			'INSERT INTO '||V_TGT_DB||'.'||V_TGT_TABLE||'
			('||V_FULL_KEY ||V_HISTORY_COLUMNS ||V_NORMAL_COMMON_COLUMNS||', '||V_END_DATE_COLUMN||'
			, START_TS, END_TS, PROCESS_NAME, batch_id)
			SELECT 
				'||V_FULL_KEY ||V_HISTORY_COLUMNS ||V_NORMAL_COMMON_COLUMNS||', '||V_END_DATE_COLUMN||'
				,CURRENT_TIMESTAMP START_TS
				,CASE WHEN INPV_DELETE_FLAG = 1 THEN CURRENT_TIMESTAMP ELSE NULL END END_TS
				,'''||I_PROCESSNAME||'''
				,batch_id
			FROM UPSERT_MODEL_'||V_TGT_TABLE||'
			WHERE FROM_INPV = 1
			AND IN_MODEL = 0;'
			into V_INSERT_INTO_MODEL_FROM_INPV
			WHERE V_APPLY_TYPE = V_HISTORY_TYPE;
			
			select
			'INSERT INTO '||V_TGT_DB||'.'||V_TGT_TABLE||'
			('||V_FULL_KEY ||V_NORMAL_COMMON_COLUMNS||'
			, START_TS, END_TS, PROCESS_NAME, batch_id)
			SELECT '||V_FULL_KEY ||V_NORMAL_COMMON_COLUMNS||'
			,CURRENT_TIMESTAMP(6) Start_Ts ,CASE WHEN INPV_DELETE_FLAG = 1 THEN CURRENT_TIMESTAMP ELSE NULL END END_TS, '''||I_PROCESSNAME||''', batch_id
			FROM TMP_INPUT_VIEW_'||V_TGT_TABLE||' X
			WHERE NOT EXISTS (SEL 1 FROM '||V_TGT_DB||'.'||V_TGT_TABLE||' Y WHERE ' || V_FULL_KEY_JOIN || ' ) ;'
			into V_INSERT_INTO_MODEL_FROM_INPV
			WHERE V_APPLY_TYPE <> V_HISTORY_TYPE;

			--------------------------------------------------------------------------------------------------------------------------------
			--------------------------------------------------------------------------------------------------------------------------------
			CALL GDEV1P_PP.DBC_SYSEXECSQL_WITH_LOG(V_DROP_TMP_INPUT_VIEW,V_SQL_SCRIPT_ID,I_RUN_ID,V_SOURCE_NAME,I_PROCESSNAME,I_LOAD_ID,0/*1 log or 0 don't*/,V_DBC_RETURN_CODE,V_DBC_RETURN_MSG,V_DBC_ROWS_COUNT);
			CALL GDEV1P_PP.DBC_SYSEXECSQL_WITH_LOG(V_DROP_DELTA_INPUT_VIEW,V_SQL_SCRIPT_ID,I_RUN_ID,V_SOURCE_NAME,I_PROCESSNAME,I_LOAD_ID,0/*1 log or 0 don't*/,V_DBC_RETURN_CODE,V_DBC_RETURN_MSG,V_DBC_ROWS_COUNT);
			CALL GDEV1P_PP.DBC_SYSEXECSQL_WITH_LOG(V_DROP_INPUT_VIEW,V_SQL_SCRIPT_ID,I_RUN_ID,V_SOURCE_NAME,I_PROCESSNAME,I_LOAD_ID,0/*1 log or 0 don't*/,V_DBC_RETURN_CODE,V_DBC_RETURN_MSG,V_DBC_ROWS_COUNT);
			CALL GDEV1P_PP.DBC_SYSEXECSQL_WITH_LOG(V_DROP_BASE_TABLE,V_SQL_SCRIPT_ID,I_RUN_ID,V_SOURCE_NAME,I_PROCESSNAME,I_LOAD_ID,0/*1 log or 0 don't*/,V_DBC_RETURN_CODE,V_DBC_RETURN_MSG,V_DBC_ROWS_COUNT);
			CALL GDEV1P_PP.DBC_SYSEXECSQL_WITH_LOG(V_DROP_ALL_KEYS,V_SQL_SCRIPT_ID,I_RUN_ID,V_SOURCE_NAME,I_PROCESSNAME,I_LOAD_ID,0/*1 log or 0 don't*/,V_DBC_RETURN_CODE,V_DBC_RETURN_MSG,V_DBC_ROWS_COUNT);
			CALL GDEV1P_PP.DBC_SYSEXECSQL_WITH_LOG(V_DROP_NEW_MODEL_END_DATE,V_SQL_SCRIPT_ID,I_RUN_ID,V_SOURCE_NAME,I_PROCESSNAME,I_LOAD_ID,0/*1 log or 0 don't*/,V_DBC_RETURN_CODE,V_DBC_RETURN_MSG,V_DBC_ROWS_COUNT);
			CALL GDEV1P_PP.DBC_SYSEXECSQL_WITH_LOG(V_DROP_UPSERT_MODEL,V_SQL_SCRIPT_ID,I_RUN_ID,V_SOURCE_NAME,I_PROCESSNAME,I_LOAD_ID,0/*1 log or 0 don't*/,V_DBC_RETURN_CODE,V_DBC_RETURN_MSG,V_DBC_ROWS_COUNT);
			
			IF CAST(V_TMP_INPUT_VIEW AS CHAR(10)) <> ''
			THEN
				SET V_SQL_SCRIPT_ID = V_SQL_SCRIPT_ID + 1;
				CALL GDEV1P_PP.DBC_SYSEXECSQL_WITH_LOG(V_TMP_INPUT_VIEW,V_SQL_SCRIPT_ID,I_RUN_ID,V_SOURCE_NAME,I_PROCESSNAME,I_LOAD_ID,1/*1 log or 0 don't*/,V_DBC_RETURN_CODE,V_DBC_RETURN_MSG,V_DBC_ROWS_COUNT);
				IF V_DBC_RETURN_CODE <> 0 THEN
					SET V_RETURN_CODE = V_DBC_RETURN_CODE;
					SET V_RETURN_MSG = V_DBC_RETURN_MSG;
					LEAVE MainBlock;
				END IF;
			END IF;
			
			CALL GDEV1P_PP.CHECK_MANDATORY_COLUMNS(NULL, V_TMP_INPUT_VIEW_NAME, V_FULL_KEY,V_NULLABLE_COLUMN, V_DBC_RETURN_CODE, V_DBC_RETURN_MSG);
			IF V_DBC_RETURN_CODE <> 0 THEN
				SET V_RETURN_CODE = V_DBC_RETURN_CODE;
				SET V_RETURN_MSG = V_DBC_RETURN_MSG;
				LEAVE MainBlock;
			END IF;
			
			IF CAST(V_VT_DELTA_INPUT_VIEW AS CHAR(10)) <> ''
			THEN
				
				SET V_SQL_SCRIPT_ID = V_SQL_SCRIPT_ID + 1;
				CALL GDEV1P_PP.DBC_SYSEXECSQL_WITH_LOG(V_VT_DELTA_INPUT_VIEW,V_SQL_SCRIPT_ID,I_RUN_ID,V_SOURCE_NAME,I_PROCESSNAME,I_LOAD_ID,1/*1 log or 0 don't*/,V_DBC_RETURN_CODE,V_DBC_RETURN_MSG,V_DBC_ROWS_COUNT);
				IF V_DBC_RETURN_CODE <> 0 THEN
					SET V_RETURN_CODE = V_DBC_RETURN_CODE;
					SET V_RETURN_MSG = V_DBC_RETURN_MSG;
					LEAVE MainBlock;
				END IF;
				
				CALL GDEV1P_PP.COUNT_ROWS('', V_DELTA_INPUT_VIEW_NAME, V_ROWS_IN_DELTA, V_DBC_RETURN_CODE, V_DBC_RETURN_MSG);
				IF V_DBC_RETURN_CODE <> 0 THEN
					SET V_RETURN_CODE = V_DBC_RETURN_CODE;
					SET V_RETURN_MSG = V_DBC_RETURN_MSG;
					LEAVE MainBlock;
				END IF;
				
				
				if V_ROWS_IN_DELTA = 0
				then
					leave MainBlock;
				end if;
				
			
			END IF;
			
			IF CAST(V_VT_INPUT_VIEW AS CHAR(10)) <> ''
			THEN
				SET V_SQL_SCRIPT_ID = V_SQL_SCRIPT_ID + 1;
				CALL GDEV1P_PP.DBC_SYSEXECSQL_WITH_LOG(V_VT_INPUT_VIEW,V_SQL_SCRIPT_ID,I_RUN_ID,V_SOURCE_NAME,I_PROCESSNAME,I_LOAD_ID,1/*1 log or 0 don't*/,V_DBC_RETURN_CODE,V_DBC_RETURN_MSG,V_DBC_ROWS_COUNT);
				IF V_DBC_RETURN_CODE <> 0 THEN
					SET V_RETURN_CODE = V_DBC_RETURN_CODE;
					SET V_RETURN_MSG = V_DBC_RETURN_MSG;
					LEAVE MainBlock;
				END IF;
			END IF;
			
			IF CAST(V_VT_BASE_TABLE AS CHAR(10)) <> ''
			THEN
				SET V_SQL_SCRIPT_ID = V_SQL_SCRIPT_ID + 1;
				CALL GDEV1P_PP.DBC_SYSEXECSQL_WITH_LOG(V_VT_BASE_TABLE,V_SQL_SCRIPT_ID,I_RUN_ID,V_SOURCE_NAME,I_PROCESSNAME,I_LOAD_ID,1/*1 log or 0 don't*/,V_DBC_RETURN_CODE,V_DBC_RETURN_MSG,V_DBC_ROWS_COUNT);
				IF V_DBC_RETURN_CODE <> 0 THEN
					SET V_RETURN_CODE = V_DBC_RETURN_CODE;
					SET V_RETURN_MSG = V_DBC_RETURN_MSG;
					LEAVE MainBlock;
				END IF;
				
				/*
				CALL GDEV1P_PP.COUNT_ROWS('', V_BASE_VT_NAME, V_ROWS_IN_BASE, V_DBC_RETURN_CODE, V_DBC_RETURN_MSG);
				IF V_DBC_RETURN_CODE <> 0 THEN
					SET V_RETURN_CODE = V_DBC_RETURN_CODE;
					SET V_RETURN_MSG = V_DBC_RETURN_MSG;
					LEAVE MainBlock;
				END IF;
				*/
				
				--if V_ROWS_IN_BASE > 0 or 1=1
				--then
			END IF;
			
			IF CAST(V_VT_ALL_KEYS AS CHAR(10)) <> ''
			THEN
				SET V_SQL_SCRIPT_ID = V_SQL_SCRIPT_ID + 1;
				CALL GDEV1P_PP.DBC_SYSEXECSQL_WITH_LOG(V_VT_ALL_KEYS,V_SQL_SCRIPT_ID,I_RUN_ID,V_SOURCE_NAME,I_PROCESSNAME,I_LOAD_ID,1/*1 log or 0 don't*/,V_DBC_RETURN_CODE,V_DBC_RETURN_MSG,V_DBC_ROWS_COUNT);
				IF V_DBC_RETURN_CODE <> 0 THEN
					SET V_RETURN_CODE = V_DBC_RETURN_CODE;
					SET V_RETURN_MSG = V_DBC_RETURN_MSG;
					LEAVE MainBlock;
				END IF;
			END IF;
			
			IF CAST(V_VT_NEW_MODEL_END_DATE AS CHAR(10)) <> ''
			THEN
				SET V_SQL_SCRIPT_ID = V_SQL_SCRIPT_ID + 1;
				CALL GDEV1P_PP.DBC_SYSEXECSQL_WITH_LOG(V_VT_NEW_MODEL_END_DATE,V_SQL_SCRIPT_ID,I_RUN_ID,V_SOURCE_NAME,I_PROCESSNAME,I_LOAD_ID,1/*1 log or 0 don't*/,V_DBC_RETURN_CODE,V_DBC_RETURN_MSG,V_DBC_ROWS_COUNT);
				IF V_DBC_RETURN_CODE <> 0 THEN
					SET V_RETURN_CODE = V_DBC_RETURN_CODE;
					SET V_RETURN_MSG = V_DBC_RETURN_MSG;
					LEAVE MainBlock;
				END IF;
			END IF;
			
			IF CAST(V_VT_UPSERT_MODEL AS CHAR(10)) <> ''
			THEN
				SET V_SQL_SCRIPT_ID = V_SQL_SCRIPT_ID + 1;
				CALL GDEV1P_PP.DBC_SYSEXECSQL_WITH_LOG(V_VT_UPSERT_MODEL,V_SQL_SCRIPT_ID,I_RUN_ID,V_SOURCE_NAME,I_PROCESSNAME,I_LOAD_ID,1/*1 log or 0 don't*/,V_DBC_RETURN_CODE,V_DBC_RETURN_MSG,V_DBC_ROWS_COUNT);
				IF V_DBC_RETURN_CODE <> 0 THEN
					SET V_RETURN_CODE = V_DBC_RETURN_CODE;
					SET V_RETURN_MSG = V_DBC_RETURN_MSG;
					LEAVE MainBlock;
				END IF;
			END IF;
				
			--end if /*end rows in base*/;
			
			SET V_SQL_SCRIPT_ID = V_SQL_SCRIPT_ID + 1;
			CALL GDEV1P_PP.DBC_SYSEXECSQL_WITH_LOG('BT',V_SQL_SCRIPT_ID,I_RUN_ID,V_SOURCE_NAME,I_PROCESSNAME,I_LOAD_ID,1/*1 log or 0 don't*/,V_DBC_RETURN_CODE,V_DBC_RETURN_MSG,V_DBC_ROWS_COUNT);
			IF V_DBC_RETURN_CODE <> 0 THEN
				SET V_RETURN_CODE = V_DBC_RETURN_CODE;
				SET V_RETURN_MSG = V_DBC_RETURN_MSG;
				LEAVE MainBlock;
			END IF;	
			
			IF CAST(V_DEL_FROM_MODEL_SAME_HC AS CHAR(10)) <> ''
			THEN
				SET V_SQL_SCRIPT_ID = V_SQL_SCRIPT_ID + 1;
				CALL GDEV1P_PP.DBC_SYSEXECSQL_WITH_LOG(V_DEL_FROM_MODEL_SAME_HC,V_SQL_SCRIPT_ID,I_RUN_ID,V_SOURCE_NAME,I_PROCESSNAME,I_LOAD_ID,1/*1 log or 0 don't*/,V_DBC_RETURN_CODE,V_DBC_RETURN_MSG,V_DBC_ROWS_COUNT);
				IF V_DBC_RETURN_CODE <> 0 THEN
					SET V_RETURN_CODE = V_DBC_RETURN_CODE;
					SET V_RETURN_MSG = V_DBC_RETURN_MSG;
					LEAVE MainBlock;
				END IF;
			END IF;
			
			IF CAST(V_UPDATE_MODEL_DATA_FROM_INPV AS CHAR(10)) <> ''
			THEN
				SET V_SQL_SCRIPT_ID = V_SQL_SCRIPT_ID + 1;
				CALL GDEV1P_PP.DBC_SYSEXECSQL_WITH_LOG(V_UPDATE_MODEL_DATA_FROM_INPV,V_SQL_SCRIPT_ID,I_RUN_ID,V_SOURCE_NAME,I_PROCESSNAME,I_LOAD_ID,1/*1 log or 0 don't*/,V_DBC_RETURN_CODE,V_DBC_RETURN_MSG,V_DBC_ROWS_COUNT);
				IF V_DBC_RETURN_CODE <> 0 THEN
					SET V_RETURN_CODE = V_DBC_RETURN_CODE;
					SET V_RETURN_MSG = V_DBC_RETURN_MSG;
					LEAVE MainBlock;
				END IF;
			END IF;
			
			IF CAST(V_UPDATE_END_DATE_COLUMN AS CHAR(10)) <> ''
			THEN
				SET V_SQL_SCRIPT_ID = V_SQL_SCRIPT_ID + 1;
				CALL GDEV1P_PP.DBC_SYSEXECSQL_WITH_LOG(V_UPDATE_END_DATE_COLUMN,V_SQL_SCRIPT_ID,I_RUN_ID,V_SOURCE_NAME,I_PROCESSNAME,I_LOAD_ID,1/*1 log or 0 don't*/,V_DBC_RETURN_CODE,V_DBC_RETURN_MSG,V_DBC_ROWS_COUNT);
				IF V_DBC_RETURN_CODE <> 0 THEN
					SET V_RETURN_CODE = V_DBC_RETURN_CODE;
					SET V_RETURN_MSG = V_DBC_RETURN_MSG;
					LEAVE MainBlock;
				END IF;
			END IF;
			
			IF CAST(V_INSERT_INTO_MODEL_FROM_INPV AS CHAR(10)) <> ''
			THEN
				SET V_SQL_SCRIPT_ID = V_SQL_SCRIPT_ID + 1;
				CALL GDEV1P_PP.DBC_SYSEXECSQL_WITH_LOG(V_INSERT_INTO_MODEL_FROM_INPV,V_SQL_SCRIPT_ID,I_RUN_ID,V_SOURCE_NAME,I_PROCESSNAME,I_LOAD_ID,1/*1 log or 0 don't*/,V_DBC_RETURN_CODE,V_DBC_RETURN_MSG,V_DBC_ROWS_COUNT);
				IF V_DBC_RETURN_CODE <> 0 THEN
					SET V_RETURN_CODE = V_DBC_RETURN_CODE;
					SET V_RETURN_MSG = V_DBC_RETURN_MSG;
					LEAVE MainBlock;
				END IF;
			END IF;
			
			SET V_SQL_SCRIPT_ID = V_SQL_SCRIPT_ID + 1;
			CALL GDEV1P_PP.DBC_SYSEXECSQL_WITH_LOG('ET',V_SQL_SCRIPT_ID,I_RUN_ID,V_SOURCE_NAME,I_PROCESSNAME,I_LOAD_ID,1/*1 log or 0 don't*/,V_DBC_RETURN_CODE,V_DBC_RETURN_MSG,V_DBC_ROWS_COUNT);
			IF V_DBC_RETURN_CODE <> 0 THEN
				SET V_RETURN_CODE = V_DBC_RETURN_CODE;
				SET V_RETURN_MSG = V_DBC_RETURN_MSG;
				LEAVE MainBlock;
			END IF;
        END;
                                                                                        
                                                                                         
        SET O_RETURN_CODE = V_RETURN_CODE;
        SET O_RETURN_MSG = V_RETURN_MSG;
        SET O_ROWS_COUNT = V_ROWS_COUNT;
    END;